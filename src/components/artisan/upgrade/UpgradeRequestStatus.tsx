import React from 'react';
import { Link } from 'react-router-dom';
import {
  StarIcon,
  CheckCircleIcon,
  ClockIcon,
  XCircleIcon,
} from '@heroicons/react/24/outline';
import { UpgradeRequestStatus as StatusEnum } from '../../../types/artisan';
import { Card } from '../../ui/Card';
import { Badge } from '../../ui/Badge';
import { Button } from '../../ui/Button';

interface UpgradeRequestStatusProps {
  request: {
    hasRequest: boolean;
    status?: StatusEnum;
    createdAt?: Date;
    updatedAt?: Date;
    adminNotes?: string;
    reviewedAt?: Date;
  };
}

export const UpgradeRequestStatus: React.FC<UpgradeRequestStatusProps> = ({
  request,
}) => {
  const getStatusBadge = (status: StatusEnum) => {
    const statusConfig = {
      [StatusEnum.PENDING]: {
        variant: 'warning' as const,
        text: 'ƒêang ch·ªù duy·ªát',
        icon: ClockIcon,
      },
      [StatusEnum.APPROVED]: {
        variant: 'success' as const,
        text: 'ƒê√£ ƒë∆∞·ª£c duy·ªát',
        icon: CheckCircleIcon,
      },
      [StatusEnum.REJECTED]: {
        variant: 'danger' as const,
        text: 'ƒê√£ b·ªã t·ª´ ch·ªëi',
        icon: XCircleIcon,
      },
    };

    const config = statusConfig[status];
    const IconComponent = config.icon;

    return (
      <Badge variant={config.variant} className="inline-flex items-center">
        <IconComponent className="w-4 h-4 mr-1" />
        {config.text}
      </Badge>
    );
  };

  const formatDate = (dateString: string | Date) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  if (!request.hasRequest || !request.status) return null;

  return (
    <Card className="p-8 text-center">
      <div className="mb-6">
        <StarIcon className="w-16 h-16 text-primary mx-auto mb-4" />
        <h1 className="text-2xl font-bold text-gray-900 mb-2">
          Y√™u c·∫ßu n√¢ng c·∫•p ngh·ªá nh√¢n
        </h1>
        <div className="mb-4">{getStatusBadge(request.status)}</div>
      </div>

      <div className="bg-gray-50 rounded-lg p-6 mb-6">
        <h3 className="font-semibold text-gray-900 mb-3">Th√¥ng tin y√™u c·∫ßu</h3>

        <div className="space-y-2 text-sm text-gray-600">
          {request.createdAt && (
            <p>
              <strong>Ng√†y g·ª≠i:</strong> {formatDate(request.createdAt)}
            </p>
          )}
          {request.updatedAt && (
            <p>
              <strong>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:</strong>{' '}
              {formatDate(request.updatedAt)}
            </p>
          )}
          {request.reviewedAt && (
            <p>
              <strong>Ng√†y xem x√©t:</strong> {formatDate(request.reviewedAt)}
            </p>
          )}
        </div>
      </div>

      {request.status === StatusEnum.PENDING && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <p className="text-blue-800 text-sm">
            ‚è≥ Y√™u c·∫ßu c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c xem x√©t. Ch√∫ng t√¥i s·∫Ω th√¥ng b√°o k·∫øt qu·∫£
            trong v√≤ng 2-3 ng√†y l√†m vi·ªác.
          </p>
        </div>
      )}

      {request.status === StatusEnum.APPROVED && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <p className="text-green-800 text-sm">
            üéâ Ch√∫c m·ª´ng! T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p th√†nh ngh·ªá nh√¢n.
            B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu t·∫°o s·∫£n ph·∫©m v√† t√πy ch·ªânh trang c√° nh√¢n.
          </p>
        </div>
      )}

      {request.adminNotes && (
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-6">
          <h4 className="font-medium text-gray-900 mb-2">
            Ghi ch√∫ t·ª´ qu·∫£n tr·ªã vi√™n:
          </h4>
          <p className="text-sm text-gray-600">{request.adminNotes}</p>
        </div>
      )}

      <div className="flex justify-center space-x-3">
        <Button
          variant="ghost"
          onClick={() => (window.location.href = '/profile')}
        >
          Quay l·∫°i trang c√° nh√¢n
        </Button>

        {request.status === StatusEnum.APPROVED && (
          <Button onClick={() => (window.location.href = '/artisan/dashboard')}>
            ƒê·∫øn b·∫£ng ƒëi·ªÅu khi·ªÉn ngh·ªá nh√¢n
          </Button>
        )}
      </div>
    </Card>
  );
};
