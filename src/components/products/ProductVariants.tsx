import React, { useState } from 'react';
import { PlusIcon, XMarkIcon } from '@heroicons/react/24/outline';
import {
  ProductVariant,
  Category,
  CategoryAttributeTemplate,
} from '../../types/product';
import { Button } from '../ui/Button';
import { Input } from '../ui/Input';
import { Select } from '../ui/Dropdown';
import { Card } from '../ui/Card';
import { Badge } from '../ui/Badge';

interface ProductVariantsProps {
  variants: Partial<ProductVariant>[];
  onVariantsChange: (variants: Partial<ProductVariant>[]) => void;
  categories: Category[];
  basePrice: number;
}

export const ProductVariants: React.FC<ProductVariantsProps> = ({
  variants,
  onVariantsChange,
  categories,
  basePrice,
}) => {
  const [showAddForm, setShowAddForm] = useState(false);
  const [newVariant, setNewVariant] = useState<Partial<ProductVariant>>({
    name: '',
    price: basePrice,
    quantity: 0,
    attributes: {},
    isActive: true,
    isDefault: variants.length === 0,
    sortOrder: variants.length,
  });

  // Get attribute templates from selected categories
  const attributeTemplates = categories
    .flatMap((cat) => cat.attributeTemplates || [])
    .filter((template) => template.isVariant);

  const addVariant = () => {
    if (
      !newVariant.name?.trim() ||
      !newVariant.price ||
      newVariant.quantity === undefined
    ) {
      return;
    }

    const variantToAdd = {
      ...newVariant,
      id: `temp_${Date.now()}`, // Temporary ID for UI
      sku: '', // Will be generated by server
    };

    onVariantsChange([...variants, variantToAdd]);

    // Reset form
    setNewVariant({
      name: '',
      price: basePrice,
      quantity: 0,
      attributes: {},
      isActive: true,
      isDefault: false,
      sortOrder: variants.length + 1,
    });
    setShowAddForm(false);
  };

  const removeVariant = (index: number) => {
    const newVariants = variants.filter((_, i) => i !== index);
    onVariantsChange(newVariants);
  };

  const updateVariant = (index: number, field: string, value: any) => {
    const newVariants = [...variants];
    newVariants[index] = { ...newVariants[index], [field]: value };
    onVariantsChange(newVariants);
  };

  const setDefaultVariant = (index: number) => {
    const newVariants = variants.map((variant, i) => ({
      ...variant,
      isDefault: i === index,
    }));
    onVariantsChange(newVariants);
  };

  return (
    <div className="space-y-6">
      {/* Existing Variants */}
      {variants.length > 0 && (
        <div className="space-y-4">
          <h3 className="text-lg font-medium">Danh sách biến thể</h3>

          {variants.map((variant, index) => (
            <Card key={index} className="p-4">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-2">
                  <h4 className="font-medium">
                    {variant.name || `Biến thể ${index + 1}`}
                  </h4>
                  {variant.isDefault && (
                    <Badge variant="primary" size="sm">
                      Mặc định
                    </Badge>
                  )}
                  {!variant.isActive && (
                    <Badge variant="secondary" size="sm">
                      Ẩn
                    </Badge>
                  )}
                </div>

                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  onClick={() => removeVariant(index)}
                  leftIcon={<XMarkIcon className="w-4 h-4" />}
                >
                  Xóa
                </Button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <Input
                  label="Tên biến thể"
                  value={variant.name || ''}
                  onChange={(e) => updateVariant(index, 'name', e.target.value)}
                  placeholder="Ví dụ: Màu đỏ - Size M"
                />

                <Input
                  label="Giá"
                  type="number"
                  value={variant.price || basePrice}
                  onChange={(e) =>
                    updateVariant(index, 'price', Number(e.target.value))
                  }
                  min={0}
                />

                <Input
                  label="Số lượng"
                  type="number"
                  value={variant.quantity || 0}
                  onChange={(e) =>
                    updateVariant(index, 'quantity', Number(e.target.value))
                  }
                  min={0}
                />
              </div>

              {/* Attributes */}
              {attributeTemplates.length > 0 && (
                <div className="mt-4">
                  <h5 className="font-medium mb-2">Thuộc tính</h5>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {attributeTemplates.map((template) => (
                      <div key={template.id}>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          {template.name}
                        </label>
                        {template.type === 'SELECT' && template.options ? (
                          <Select
                            value={variant.attributes?.[template.key] || ''}
                            onChange={(value) => {
                              const newAttributes = {
                                ...variant.attributes,
                                [template.key]: value,
                              };
                              updateVariant(index, 'attributes', newAttributes);
                            }}
                            options={[
                              { label: 'Chọn...', value: '' },
                              ...template.options.map((option) => ({
                                label: option,
                                value: option,
                              })),
                            ]}
                          />
                        ) : (
                          <Input
                            value={variant.attributes?.[template.key] || ''}
                            onChange={(e) => {
                              const newAttributes = {
                                ...variant.attributes,
                                [template.key]: e.target.value,
                              };
                              updateVariant(index, 'attributes', newAttributes);
                            }}
                            placeholder={`Nhập ${template.name.toLowerCase()}...`}
                          />
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Actions */}
              <div className="mt-4 flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={variant.isActive}
                      onChange={(e) =>
                        updateVariant(index, 'isActive', e.target.checked)
                      }
                      className="rounded border-gray-300 text-primary focus:ring-primary"
                    />
                    <span className="ml-2 text-sm text-gray-700">Hiển thị</span>
                  </label>

                  {!variant.isDefault && (
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => setDefaultVariant(index)}
                    >
                      Đặt làm mặc định
                    </Button>
                  )}
                </div>
              </div>
            </Card>
          ))}
        </div>
      )}

      {/* Add New Variant */}
      {!showAddForm ? (
        <Button
          type="button"
          variant="outline"
          onClick={() => setShowAddForm(true)}
          leftIcon={<PlusIcon className="w-4 h-4" />}
          fullWidth
        >
          Thêm biến thể mới
        </Button>
      ) : (
        <Card className="p-4">
          <h4 className="font-medium mb-4">Thêm biến thể mới</h4>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <Input
              label="Tên biến thể"
              value={newVariant.name || ''}
              onChange={(e) =>
                setNewVariant({ ...newVariant, name: e.target.value })
              }
              placeholder="Ví dụ: Màu xanh - Size L"
              required
            />

            <Input
              label="Giá"
              type="number"
              value={newVariant.price || basePrice}
              onChange={(e) =>
                setNewVariant({ ...newVariant, price: Number(e.target.value) })
              }
              min={0}
              required
            />

            <Input
              label="Số lượng"
              type="number"
              value={newVariant.quantity || 0}
              onChange={(e) =>
                setNewVariant({
                  ...newVariant,
                  quantity: Number(e.target.value),
                })
              }
              min={0}
              required
            />
          </div>

          {/* Attributes for new variant */}
          {attributeTemplates.length > 0 && (
            <div className="mb-4">
              <h5 className="font-medium mb-2">Thuộc tính</h5>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {attributeTemplates.map((template) => (
                  <div key={template.id}>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      {template.name}
                    </label>
                    {template.type === 'SELECT' && template.options ? (
                      <Select
                        value={newVariant.attributes?.[template.key] || ''}
                        onChange={(value) => {
                          setNewVariant({
                            ...newVariant,
                            attributes: {
                              ...newVariant.attributes,
                              [template.key]: value,
                            },
                          });
                        }}
                        options={[
                          { label: 'Chọn...', value: '' },
                          ...template.options.map((option) => ({
                            label: option,
                            value: option,
                          })),
                        ]}
                      />
                    ) : (
                      <Input
                        value={newVariant.attributes?.[template.key] || ''}
                        onChange={(e) => {
                          setNewVariant({
                            ...newVariant,
                            attributes: {
                              ...newVariant.attributes,
                              [template.key]: e.target.value,
                            },
                          });
                        }}
                        placeholder={`Nhập ${template.name.toLowerCase()}...`}
                      />
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="flex items-center justify-end space-x-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => setShowAddForm(false)}
            >
              Hủy
            </Button>
            <Button
              type="button"
              onClick={addVariant}
              disabled={
                !newVariant.name?.trim() ||
                !newVariant.price ||
                newVariant.quantity === undefined
              }
            >
              Thêm biến thể
            </Button>
          </div>
        </Card>
      )}
    </div>
  );
};
